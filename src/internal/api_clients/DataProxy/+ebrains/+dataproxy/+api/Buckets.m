classdef Buckets < ebrains.dataproxy.BaseClient
    % Buckets No description provided
    %
    % Buckets Properties:
    %
    %   serverUri           - Base URI to use when calling the API. Allows using a different server
    %                         than specified in the original API spec.
    %   httpOptions         - HTTPOptions used by all requests.
    %   preferredAuthMethod - If operation supports multiple authentication methods, specified which
    %                         method to prefer.
    %   bearerToken         - If Bearer token authentication is used, the token can be supplied 
    %                         here. Note the token is only used if operations are called for which
    %                         the API explicitly specified that Bearer authentication is supported.
    %                         If this has not been specified in the spec but most operations do 
    %                         require Bearer authentication, consider adding the relevant header to
    %                         all requests in the preSend method.
    %   apiKey              - If API key authentication is used, the key can be supplied here. 
    %                         Note the key is only used if operations are called for which
    %                         the API explicitly specified that API key authentication is supported.
    %                         If this has not been specified in the spec but most operations do 
    %                         require API key authentication, consider adding the API key to all
    %                         requests in the preSend method.
    %   httpCredentials     - If Basic or Digest authentication is supported username/password
    %                         credentials can be supplied here as matlab.net.http.Credentials. Note 
    %                         these are only actively used if operations are called for which the 
    %                         API spec has specified they require Basic authentication. If this has
    %                         not been specified in the spec but most operations do require
    %                         Basic authentication, consider setting the Credentials property in the
    %                         httpOptions rather than through httpCredentials.
    %   cookies             - Cookie jar. The cookie jar is shared across all Api classes in the 
    %                         same package. All responses are automatically parsed for Set-Cookie
    %                         headers and cookies are automatically added to the jar. Similarly
    %                         cookies are added to outgoing requests if there are matching cookies 
    %                         in the jar for the given request. Cookies can also be added manually
    %                         by calling the setCookies method on the cookies property. The cookie
    %                         jar is also saved to disk (cookies.mat in the same directory as 
    %                         BaseClient) and reloaded in new MATLAB sessions.
    %
    % Buckets Methods:
    %
    %   Buckets - Constructor
    %   copyBucket - Copy whole bucket content to another bucket. The copy overrides existing data in the destination container.
    %   copyObject - Copy an object in the same or to another bucket. The copy overrides existing data in the destination container. If you want to copy a directory, please specify so by terminating the object_name with a \&quot;/\&quot;
    %   createBucket - Init a bucket
    %   deleteBucket - Delete container
    %   deleteObject - Delete the object in the bucket. If you want to delete a directory, please specify so by terminating the object_name with a \&quot;/\&quot;
    %   getBucketStat - Get bucket stats (optional authentication)
    %   getDownloadUrl - Get a download url for an object in the bucket. (optional authentication)
    %   getUploadUrl - Get an upload url for an object in the bucket.
    %   listBucketObjects - List objects in the bucket (optional authentication)
    %   listBuckets - List available buckets
    %   renameObject - Rename an object in a specified bucket. The process overrides existing data in the same container and delete the initial data. If you want to rename a directory, please specify so by terminating the object_name with a \&quot;/\&quot;
    %   updateBucket - Update a bucket
    %
    % See Also: matlab.net.http.HTTPOptions, matlab.net.http.Credentials, 
    %   CookieJar.setCookies, ebrains.dataproxy.BaseClient

    % This file is automatically generated using OpenAPI
    % Specification version: 1.0.0
    % MATLAB Generator for OpenAPI version: 1.0.9
    

    % Instruct MATLAB Code Analyzer to ignore unnecessary brackets
    %#ok<*NBRAK2> 

    % Class properties
    properties
    end

    % Class methods
    methods
        function obj = Buckets(options)
            % Buckets Constructor, creates a Buckets instance.
            % When called without inputs, tries to load configuration
            % options from JSON file 'ebrains.dataproxy.Client.Settings.json'.
            % If this file is not present, the instance is initialized with 
            % default configuration option. An alternative configuration 
            % file can be provided through the "configFile" Name-Value pair.
            % All other properties of the instance can also be overridden 
            % using Name-Value pairs where Name equals the property name.
            % 
            % Examples:
            %
            %   % Create a client with default options and serverUri
            %   % as parsed from OpenAPI spec (if available)
            %   client = ebrains.dataproxy.api.Buckets();
            %
            %   % Create a client for alternative server/base URI
            %   client = ebrains.dataproxy.api.Buckets("serverUri","https://example.com:1234/api/");
            %
            %   % Create a client loading configuration options from 
            %   % JSON configuration file
            %   client = ebrains.dataproxy.api.Buckets("configFile","myconfig.json");
            %
            %   % Create a client with alternative HTTPOptions and an API key
            %   client = ebrains.dataproxy.api.Buckets("httpOptions",...
            %       matlab.net.http.HTTPOptions("ConnectTimeout",42),...
            %       "apiKey", "ABC123");

            arguments
                options.configFile string
                options.?ebrains.dataproxy.BaseClient
            end
            % Call base constructor to override any configured settings
            args = namedargs2cell(options);
            obj@ebrains.dataproxy.BaseClient(args{:})
        end

        function [code, result, response] = copyBucket(obj, bucket_name, to)
            % copyBucket Copy whole bucket content to another bucket. The copy overrides existing data in the destination container.
            % No description provided
            %
            % Required parameters:
            %   bucket_name - name of the bucket, Type: string
            %   to - name of the destination bucket to copy the object to, Type: string
            %
            % No optional parameters
            %
            % Responses:
            %   200: Successful Response
            %   422: Validation Error
            %
            % Returns: 
            %
            % See Also: ebrains.dataproxy.models.

            arguments
              obj ebrains.dataproxy.api.Buckets
              bucket_name string
              to string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:dataproxy:api:copyBucket:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","copyBucket")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('PUT');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://data-proxy.ebrains.eu//api");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v1/buckets/{bucket_name}/copy";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "bucket_name" +"}") = bucket_name;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("to", to);
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "HTTPBearer", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("copyBucket", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("copyBucket", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                case 422
                    result = ebrains.dataproxy.models.HTTPValidationError(response.Body.Data);
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:dataproxy:api:copyBucket:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","copyBucket",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % copyBucket method

        function [code, result, response] = copyObject(obj, bucket_name, object_name, optionals)
            % copyObject Copy an object in the same or to another bucket. The copy overrides existing data in the destination container. If you want to copy a directory, please specify so by terminating the object_name with a \"/\"
            % No description provided
            %
            % Required parameters:
            %   bucket_name - name of the bucket, Type: string
            %   object_name - name of the object, Type: string
            %
            % Optional name-value parameters:
            %   to - name of the destination bucket to copy the object to, Type: string
            %   name - No description provided, Type: string
            %
            % Responses:
            %   200: Successful Response
            %   422: Validation Error
            %
            % Returns: 
            %
            % See Also: ebrains.dataproxy.models.

            arguments
              obj ebrains.dataproxy.api.Buckets
              bucket_name string
              object_name string
              optionals.to string
              optionals.name string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:dataproxy:api:copyObject:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","copyObject")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('PUT');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://data-proxy.ebrains.eu//api");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v1/buckets/{bucket_name}/{object_name}/copy";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "bucket_name" +"}") = bucket_name;
            uri.Path(uri.Path == "{" + "object_name" +"}") = object_name;

            % Set query parameters
            if isfield(optionals, "to"), uri.Query(end+1) = matlab.net.QueryParameter("to", optionals.to); end
            if isfield(optionals, "name"), uri.Query(end+1) = matlab.net.QueryParameter("name", optionals.name); end
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "HTTPBearer", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("copyObject", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("copyObject", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                case 422
                    result = ebrains.dataproxy.models.HTTPValidationError(response.Body.Data);
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:dataproxy:api:copyObject:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","copyObject",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % copyObject method

        function [code, result, response] = createBucket(obj, CreateBucketPayload)
            % createBucket Init a bucket
            % No description provided
            %
            % Required parameters:
            %   CreateBucketPayload - No description provided, Type: CreateBucketPayload
            %       Required properties in the model for this call:
            %           bucket_name
            %       Optional properties in the model for this call:
            %
            % No optional parameters
            %
            % Responses:
            %   200: Successful Response
            %   422: Validation Error
            %
            % Returns: 
            %
            % See Also: ebrains.dataproxy.models.

            arguments
              obj ebrains.dataproxy.api.Buckets
              CreateBucketPayload ebrains.dataproxy.models.CreateBucketPayload
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:dataproxy:api:createBucket:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","createBucket")
            end
            
            % Verify that operation supports JSON or FORM as input
            specContentTypeHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/json');
            elseif ismember("application/x-www-form-urlencoded",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/x-www-form-urlencoded');
            else
                error("ebrains:dataproxy:api:createBucket:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' and 'application/x-www-form-urlencoded' MediaTypes.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","createBucket")
            end
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('POST');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://data-proxy.ebrains.eu//api");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v1/buckets";

            % No path parameters

            % No query parameters
            
            % Set JSON Body
            requiredProperties = [...
                "bucket_name",...
            ];
            optionalProperties = [...
            ];
            request.Body(1).Payload = CreateBucketPayload.getPayload(requiredProperties,optionalProperties);

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "HTTPBearer", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("createBucket", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("createBucket", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                case 422
                    result = ebrains.dataproxy.models.HTTPValidationError(response.Body.Data);
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:dataproxy:api:createBucket:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","createBucket",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % createBucket method

        function [code, result, response] = deleteBucket(obj, bucket_name)
            % deleteBucket Delete container
            % No description provided
            %
            % Required parameters:
            %   bucket_name - name of the bucket, Type: string
            %
            % No optional parameters
            %
            % Responses:
            %   200: Successful Response
            %   422: Validation Error
            %
            % Returns: DeleteResponse
            %
            % See Also: ebrains.dataproxy.models.DeleteResponse

            arguments
              obj ebrains.dataproxy.api.Buckets
              bucket_name string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:dataproxy:api:deleteBucket:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","deleteBucket")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('DELETE');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://data-proxy.ebrains.eu//api");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v1/buckets/{bucket_name}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "bucket_name" +"}") = bucket_name;

            % No query parameters
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "HTTPBearer", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("deleteBucket", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("deleteBucket", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = ebrains.dataproxy.models.DeleteResponse(response.Body.Data);
                case 422
                    result = ebrains.dataproxy.models.HTTPValidationError(response.Body.Data);
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:dataproxy:api:deleteBucket:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","deleteBucket",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % deleteBucket method

        function [code, result, response] = deleteObject(obj, bucket_name, object_name)
            % deleteObject Delete the object in the bucket. If you want to delete a directory, please specify so by terminating the object_name with a \"/\"
            % No description provided
            %
            % Required parameters:
            %   bucket_name - name of the bucket, Type: string
            %   object_name - name of the object, Type: string
            %
            % No optional parameters
            %
            % Responses:
            %   200: Successful Response
            %   422: Validation Error
            %
            % Returns: DeleteResponse
            %
            % See Also: ebrains.dataproxy.models.DeleteResponse

            arguments
              obj ebrains.dataproxy.api.Buckets
              bucket_name string
              object_name string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:dataproxy:api:deleteObject:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","deleteObject")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('DELETE');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://data-proxy.ebrains.eu//api");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v1/buckets/{bucket_name}/{object_name}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "bucket_name" +"}") = bucket_name;
            uri.Path(uri.Path == "{" + "object_name" +"}") = object_name;

            % No query parameters
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "HTTPBearer", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("deleteObject", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("deleteObject", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = ebrains.dataproxy.models.DeleteResponse(response.Body.Data);
                case 422
                    result = ebrains.dataproxy.models.HTTPValidationError(response.Body.Data);
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:dataproxy:api:deleteObject:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","deleteObject",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % deleteObject method

        function [code, result, response] = getBucketStat(obj, bucket_name)
            % getBucketStat Get bucket stats (optional authentication)
            % This endpoint can be executed either with or without authentication header. Please note that without authentication header, only public resources are accessible.
            %
            % Required parameters:
            %   bucket_name - No description provided, Type: string
            %
            % No optional parameters
            %
            % Responses:
            %   200: Successful Response
            %   422: Validation Error
            %
            % Returns: ContainerStatResponse
            %
            % See Also: ebrains.dataproxy.models.ContainerStatResponse

            arguments
              obj ebrains.dataproxy.api.Buckets
              bucket_name string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:dataproxy:api:getBucketStat:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","getBucketStat")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('GET');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://data-proxy.ebrains.eu//api");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v1/buckets/{bucket_name}/stat";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "bucket_name" +"}") = bucket_name;

            % No query parameters
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "HTTPBearer", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("getBucketStat", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("getBucketStat", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = ebrains.dataproxy.models.ContainerStatResponse(response.Body.Data);
                case 422
                    result = ebrains.dataproxy.models.HTTPValidationError(response.Body.Data);
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:dataproxy:api:getBucketStat:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","getBucketStat",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % getBucketStat method

        function [code, result, response] = getDownloadUrl(obj, bucket_name, object_name, optionals)
            % getDownloadUrl Get a download url for an object in the bucket. (optional authentication)
            % This endpoint can be executed either with or without authentication header. Please note that without authentication header, only public resources are accessible. Also, the redirect mechanism is only available for public resources.
            %
            % Required parameters:
            %   bucket_name - No description provided, Type: string
            %   object_name - No description provided, Type: string
            %
            % Optional name-value parameters:
            %   inline - No description provided, Type: logical
            %   ttl - The time to live in seconds of the returned temporary URL. Please note that this parameter can only be set by administrators of the bucket. For everyone else, the system will chose a predefined duration., Type: int32
            %   redirect - DEPRECATED: It is planned to remove this functionality in the next version of the API. To be compatible already, please set \"redirect\" to false. In the current implementation, this parameter is only allowed for non-authenticated calls. If a call is made with an authentication header with redirect=true, a 400 (Bad request) is thrown, Type: logical
            %
            % Responses:
            %   200: Successful Response
            %   422: Validation Error
            %
            % Returns: TempUrlResponse
            %
            % See Also: ebrains.dataproxy.models.TempUrlResponse

            arguments
              obj ebrains.dataproxy.api.Buckets
              bucket_name string
              object_name string
              optionals.inline logical
              optionals.ttl int32
              optionals.redirect logical
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:dataproxy:api:getDownloadUrl:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","getDownloadUrl")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('GET');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://data-proxy.ebrains.eu//api");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v1/buckets/{bucket_name}/{object_name}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "bucket_name" +"}") = bucket_name;
            uri.Path(uri.Path == "{" + "object_name" +"}") = object_name;

            % Set query parameters
            if isfield(optionals, "inline"), uri.Query(end+1) = matlab.net.QueryParameter("inline", optionals.inline); end
            if isfield(optionals, "ttl"), uri.Query(end+1) = matlab.net.QueryParameter("ttl", optionals.ttl); end
            if isfield(optionals, "redirect"), uri.Query(end+1) = matlab.net.QueryParameter("redirect", optionals.redirect); end
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "HTTPBearer", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("getDownloadUrl", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("getDownloadUrl", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = ebrains.dataproxy.models.TempUrlResponse(response.Body.Data);
                case 422
                    result = ebrains.dataproxy.models.HTTPValidationError(response.Body.Data);
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:dataproxy:api:getDownloadUrl:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","getDownloadUrl",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % getDownloadUrl method

        function [code, result, response] = getUploadUrl(obj, bucket_name, object_name)
            % getUploadUrl Get an upload url for an object in the bucket.
            % No description provided
            %
            % Required parameters:
            %   bucket_name - name of the bucket, Type: string
            %   object_name - name of the object, Type: string
            %
            % No optional parameters
            %
            % Responses:
            %   200: Successful Response
            %   422: Validation Error
            %
            % Returns: TempUrlResponse
            %
            % See Also: ebrains.dataproxy.models.TempUrlResponse

            arguments
              obj ebrains.dataproxy.api.Buckets
              bucket_name string
              object_name string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:dataproxy:api:getUploadUrl:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","getUploadUrl")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('PUT');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://data-proxy.ebrains.eu//api");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v1/buckets/{bucket_name}/{object_name}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "bucket_name" +"}") = bucket_name;
            uri.Path(uri.Path == "{" + "object_name" +"}") = object_name;

            % No query parameters
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "HTTPBearer", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("getUploadUrl", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("getUploadUrl", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = ebrains.dataproxy.models.TempUrlResponse(response.Body.Data);
                case 422
                    result = ebrains.dataproxy.models.HTTPValidationError(response.Body.Data);
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:dataproxy:api:getUploadUrl:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","getUploadUrl",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % getUploadUrl method

        function [code, result, response] = listBucketObjects(obj, bucket_name, optionals)
            % listBucketObjects List objects in the bucket (optional authentication)
            % This endpoint can be executed either with or without authentication header. Please note that without authentication header, only public resources are accessible.
            %
            % Required parameters:
            %   bucket_name - No description provided, Type: string
            %
            % Optional name-value parameters:
            %   prefix - No description provided, Type: string
            %   delimiter - No description provided, Type: string
            %   marker - No description provided, Type: string
            %   limit - No description provided, Type: int32
            %
            % Responses:
            %   200: Successful Response
            %   422: Validation Error
            %
            % Returns: SwiftApiResponse
            %
            % See Also: ebrains.dataproxy.models.SwiftApiResponse

            arguments
              obj ebrains.dataproxy.api.Buckets
              bucket_name string
              optionals.prefix string
              optionals.delimiter string
              optionals.marker string
              optionals.limit int32
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:dataproxy:api:listBucketObjects:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","listBucketObjects")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('GET');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://data-proxy.ebrains.eu//api");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v1/buckets/{bucket_name}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "bucket_name" +"}") = bucket_name;

            % Set query parameters
            if isfield(optionals, "prefix"), uri.Query(end+1) = matlab.net.QueryParameter("prefix", optionals.prefix); end
            if isfield(optionals, "delimiter"), uri.Query(end+1) = matlab.net.QueryParameter("delimiter", optionals.delimiter); end
            if isfield(optionals, "marker"), uri.Query(end+1) = matlab.net.QueryParameter("marker", optionals.marker); end
            if isfield(optionals, "limit"), uri.Query(end+1) = matlab.net.QueryParameter("limit", optionals.limit); end
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "HTTPBearer", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("listBucketObjects", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("listBucketObjects", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = ebrains.dataproxy.models.SwiftApiResponse(response.Body.Data);
                case 422
                    result = ebrains.dataproxy.models.HTTPValidationError(response.Body.Data);
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:dataproxy:api:listBucketObjects:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","listBucketObjects",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % listBucketObjects method

        function [code, result, response] = listBuckets(obj, optionals)
            % listBuckets List available buckets
            % This endpoint can be executed either with or without authentication header. Please note that without authentication header, only public resources are accessible.
            %
            % No required parameters
            %
            % Optional name-value parameters:
            %   search - No description provided, Type: string
            %
            % Responses:
            %   200: Successful Response
            %   422: Validation Error
            %
            % Returns: Array of BucketListEntry
            %
            % See Also: ebrains.dataproxy.models.BucketListEntry

            arguments
              obj ebrains.dataproxy.api.Buckets
              optionals.search string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:dataproxy:api:listBuckets:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","listBuckets")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('GET');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://data-proxy.ebrains.eu//api");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v1/buckets";

            % No path parameters

            % Set query parameters
            if isfield(optionals, "search"), uri.Query(end+1) = matlab.net.QueryParameter("search", optionals.search); end
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "HTTPBearer", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("listBuckets", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("listBuckets", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = ebrains.dataproxy.models.BucketListEntry(response.Body.Data);
                case 422
                    result = ebrains.dataproxy.models.HTTPValidationError(response.Body.Data);
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:dataproxy:api:listBuckets:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","listBuckets",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % listBuckets method

        function [code, result, response] = renameObject(obj, bucket_name, object_name, RenameObjectPayload)
            % renameObject Rename an object in a specified bucket. The process overrides existing data in the same container and delete the initial data. If you want to rename a directory, please specify so by terminating the object_name with a \"/\"
            % No description provided
            %
            % Required parameters:
            %   bucket_name - No description provided, Type: string
            %   object_name - No description provided, Type: string
            %   RenameObjectPayload - No description provided, Type: RenameObjectPayload
            %       Required properties in the model for this call:
            %           rename
            %       Optional properties in the model for this call:
            %
            % No optional parameters
            %
            % Responses:
            %   200: Successful Response
            %   422: Validation Error
            %
            % Returns: 
            %
            % See Also: ebrains.dataproxy.models.

            arguments
              obj ebrains.dataproxy.api.Buckets
              bucket_name string
              object_name string
              RenameObjectPayload ebrains.dataproxy.models.RenameObjectPayload
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:dataproxy:api:renameObject:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","renameObject")
            end
            
            % Verify that operation supports JSON or FORM as input
            specContentTypeHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/json');
            elseif ismember("application/x-www-form-urlencoded",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/x-www-form-urlencoded');
            else
                error("ebrains:dataproxy:api:renameObject:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' and 'application/x-www-form-urlencoded' MediaTypes.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","renameObject")
            end
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('PATCH');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://data-proxy.ebrains.eu//api");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v1/buckets/{bucket_name}/{object_name}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "bucket_name" +"}") = bucket_name;
            uri.Path(uri.Path == "{" + "object_name" +"}") = object_name;

            % No query parameters
            
            % Set JSON Body
            requiredProperties = [...
                "rename",...
            ];
            optionalProperties = [...
            ];
            request.Body(1).Payload = RenameObjectPayload.getPayload(requiredProperties,optionalProperties);

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "HTTPBearer", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("renameObject", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("renameObject", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                case 422
                    result = ebrains.dataproxy.models.HTTPValidationError(response.Body.Data);
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:dataproxy:api:renameObject:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","renameObject",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % renameObject method

        function [code, result, response] = updateBucket(obj, bucket_name, UpdateBucketPayload)
            % updateBucket Update a bucket
            % No description provided
            %
            % Required parameters:
            %   bucket_name - No description provided, Type: string
            %   UpdateBucketPayload - No description provided, Type: UpdateBucketPayload
            %       Required properties in the model for this call:
            %           is_public
            %       Optional properties in the model for this call:
            %
            % No optional parameters
            %
            % Responses:
            %   200: Successful Response
            %   422: Validation Error
            %
            % Returns: ContainerStatResponse
            %
            % See Also: ebrains.dataproxy.models.ContainerStatResponse

            arguments
              obj ebrains.dataproxy.api.Buckets
              bucket_name string
              UpdateBucketPayload ebrains.dataproxy.models.UpdateBucketPayload
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:dataproxy:api:updateBucket:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","updateBucket")
            end
            
            % Verify that operation supports JSON or FORM as input
            specContentTypeHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/json');
            elseif ismember("application/x-www-form-urlencoded",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/x-www-form-urlencoded');
            else
                error("ebrains:dataproxy:api:updateBucket:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' and 'application/x-www-form-urlencoded' MediaTypes.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","updateBucket")
            end
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('PUT');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://data-proxy.ebrains.eu//api");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v1/buckets/{bucket_name}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "bucket_name" +"}") = bucket_name;

            % No query parameters
            
            % Set JSON Body
            requiredProperties = [...
                "is_public",...
            ];
            optionalProperties = [...
            ];
            request.Body(1).Payload = UpdateBucketPayload.getPayload(requiredProperties,optionalProperties);

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "HTTPBearer", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("updateBucket", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("updateBucket", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = ebrains.dataproxy.models.ContainerStatResponse(response.Body.Data);
                case 422
                    result = ebrains.dataproxy.models.HTTPValidationError(response.Body.Data);
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:dataproxy:api:updateBucket:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","updateBucket",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % updateBucket method

    end %methods
end %class


