classdef Admin < ebrains.kgcore.BaseClient
    % Admin No description provided
    %
    % Admin Properties:
    %
    %   serverUri           - Base URI to use when calling the API. Allows using a different server
    %                         than specified in the original API spec.
    %   httpOptions         - HTTPOptions used by all requests.
    %   preferredAuthMethod - If operation supports multiple authentication methods, specified which
    %                         method to prefer.
    %   bearerToken         - If Bearer token authentication is used, the token can be supplied 
    %                         here. Note the token is only used if operations are called for which
    %                         the API explicitly specified that Bearer authentication is supported.
    %                         If this has not been specified in the spec but most operations do 
    %                         require Bearer authentication, consider adding the relevant header to
    %                         all requests in the preSend method.
    %   apiKey              - If API key authentication is used, the key can be supplied here. 
    %                         Note the key is only used if operations are called for which
    %                         the API explicitly specified that API key authentication is supported.
    %                         If this has not been specified in the spec but most operations do 
    %                         require API key authentication, consider adding the API key to all
    %                         requests in the preSend method.
    %   httpCredentials     - If Basic or Digest authentication is supported username/password
    %                         credentials can be supplied here as matlab.net.http.Credentials. Note 
    %                         these are only actively used if operations are called for which the 
    %                         API spec has specified they require Basic authentication. If this has
    %                         not been specified in the spec but most operations do require
    %                         Basic authentication, consider setting the Credentials property in the
    %                         httpOptions rather than through httpCredentials.
    %   cookies             - Cookie jar. The cookie jar is shared across all Api classes in the 
    %                         same package. All responses are automatically parsed for Set-Cookie
    %                         headers and cookies are automatically added to the jar. Similarly
    %                         cookies are added to outgoing requests if there are matching cookies 
    %                         in the jar for the given request. Cookies can also be added manually
    %                         by calling the setCookies method on the cookies property. The cookie
    %                         jar is also saved to disk (cookies.mat in the same directory as 
    %                         BaseClient) and reloaded in new MATLAB sessions.
    %
    % Admin Methods:
    %
    %   Admin - Constructor
    %   assignTypeToSpace - Assign a type to a space
    %   calculateInstanceInvitationScope - Update invitation scope for this instance
    %   createSpaceDefinition - Explicitly specify a space
    %   createTypeDefinition - Specify a type
    %   defineProperty - Upload a property specification either globally or for the requesting client
    %   definePropertyForType - Define a property specification either globally for the requesting client
    %   deprecateProperty - Upload a property specification either globally or for the requesting client
    %   deprecatePropertyForType - Deprecate a property specification for a specific type either globally or for the requesting client
    %   getAllRoleDefinitions - 
    %   getAvailableChecks - 
    %   getClaimForRole - 
    %   getReport - 
    %   healthStatus - 
    %   removeSpaceDefinition - Remove a space definition
    %   removeTypeDefinition - Remove a type definition
    %   removeTypeFromSpace - Remove a type in space definition
    %   rerunEvents - Trigger a rerun of the events of this space
    %   triggerInference - Triggers the inference of all documents of the given space
    %   updateClaimForRole - 
    %
    % See Also: matlab.net.http.HTTPOptions, matlab.net.http.Credentials, 
    %   CookieJar.setCookies, ebrains.kgcore.BaseClient

    % This file is automatically generated using OpenAPI
    % Specification version: 1.0.0
    % MATLAB Generator for OpenAPI version: 1.0.9
    

    % Instruct MATLAB Code Analyzer to ignore unnecessary brackets
    %#ok<*NBRAK2> 

    % Class properties
    properties
    end

    % Class methods
    methods
        function obj = Admin(options)
            % Admin Constructor, creates a Admin instance.
            % When called without inputs, tries to load configuration
            % options from JSON file 'ebrains.kgcore.Client.Settings.json'.
            % If this file is not present, the instance is initialized with 
            % default configuration option. An alternative configuration 
            % file can be provided through the "configFile" Name-Value pair.
            % All other properties of the instance can also be overridden 
            % using Name-Value pairs where Name equals the property name.
            % 
            % Examples:
            %
            %   % Create a client with default options and serverUri
            %   % as parsed from OpenAPI spec (if available)
            %   client = ebrains.kgcore.api.Admin();
            %
            %   % Create a client for alternative server/base URI
            %   client = ebrains.kgcore.api.Admin("serverUri","https://example.com:1234/api/");
            %
            %   % Create a client loading configuration options from 
            %   % JSON configuration file
            %   client = ebrains.kgcore.api.Admin("configFile","myconfig.json");
            %
            %   % Create a client with alternative HTTPOptions and an API key
            %   client = ebrains.kgcore.api.Admin("httpOptions",...
            %       matlab.net.http.HTTPOptions("ConnectTimeout",42),...
            %       "apiKey", "ABC123");

            arguments
                options.configFile string
                options.?ebrains.kgcore.BaseClient
            end
            % Call base constructor to override any configured settings
            args = namedargs2cell(options);
            obj@ebrains.kgcore.BaseClient(args{:})
        end

        function [code, result, response] = assignTypeToSpace(obj, space, type)
            % assignTypeToSpace Assign a type to a space
            % No description provided
            %
            % Required parameters:
            %   space - The space be linked to or \"myspace\" for your private space, Type: string
            %   type - No description provided, Type: string
            %
            % No optional parameters
            %
            % Responses:
            %   200: OK
            %
            % Returns: 
            %
            % See Also: ebrains.kgcore.models.

            arguments
              obj ebrains.kgcore.api.Admin
              space string
              type string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % No return content type specified, defaulting to JSON
            request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('PUT');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://core.kg.ebrains.eu");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v3/spaces/{space}/types";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "space" +"}") = space;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("type", type);
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "Authorization", ...
                "Client-Authorization", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("assignTypeToSpace", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("assignTypeToSpace", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:kgcore:api:assignTypeToSpace:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","assignTypeToSpace",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % assignTypeToSpace method

        function [code, result, response] = calculateInstanceInvitationScope(obj, id)
            % calculateInstanceInvitationScope Update invitation scope for this instance
            % No description provided
            %
            % Required parameters:
            %   id - No description provided, Type: string, Format: uuid
            %
            % No optional parameters
            %
            % Responses:
            %   200: OK
            %
            % Returns: 
            %
            % See Also: ebrains.kgcore.models.

            arguments
              obj ebrains.kgcore.api.Admin
              id string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % No return content type specified, defaulting to JSON
            request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('PUT');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://core.kg.ebrains.eu");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v3/instances/{id}/invitationScope";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "id" +"}") = id;

            % No query parameters
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "Authorization", ...
                "Client-Authorization", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("calculateInstanceInvitationScope", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("calculateInstanceInvitationScope", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:kgcore:api:calculateInstanceInvitationScope:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","calculateInstanceInvitationScope",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % calculateInstanceInvitationScope method

        function [code, result, response] = createSpaceDefinition(obj, space, optionals)
            % createSpaceDefinition Explicitly specify a space
            % No description provided
            %
            % Required parameters:
            %   space - The space the definition is valid for. Please note that you can''t do so for your private space (\"myspace\"), Type: string
            %
            % Optional name-value parameters:
            %   autorelease - No description provided, Type: logical
            %   clientSpace - No description provided, Type: logical
            %   deferCache - No description provided, Type: logical
            %   scopeRelevant - No description provided, Type: logical
            %
            % Responses:
            %   200: OK
            %
            % Returns: 
            %
            % See Also: ebrains.kgcore.models.

            arguments
              obj ebrains.kgcore.api.Admin
              space string
              optionals.autorelease logical
              optionals.clientSpace logical
              optionals.deferCache logical
              optionals.scopeRelevant logical
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % No return content type specified, defaulting to JSON
            request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('PUT');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://core.kg.ebrains.eu");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v3/spaces/{space}/specification";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "space" +"}") = space;

            % Set query parameters
            if isfield(optionals, "autorelease"), uri.Query(end+1) = matlab.net.QueryParameter("autorelease", optionals.autorelease); end
            if isfield(optionals, "clientSpace"), uri.Query(end+1) = matlab.net.QueryParameter("clientSpace", optionals.clientSpace); end
            if isfield(optionals, "deferCache"), uri.Query(end+1) = matlab.net.QueryParameter("deferCache", optionals.deferCache); end
            if isfield(optionals, "scopeRelevant"), uri.Query(end+1) = matlab.net.QueryParameter("scopeRelevant", optionals.scopeRelevant); end
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "Authorization", ...
                "Client-Authorization", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("createSpaceDefinition", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("createSpaceDefinition", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:kgcore:api:createSpaceDefinition:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","createSpaceDefinition",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % createSpaceDefinition method

        function [code, result, response] = createTypeDefinition(obj, type, request_body, optionals)
            % createTypeDefinition Specify a type
            % No description provided
            %
            % Required parameters:
            %   type - No description provided, Type: string
            %   request_body - No description provided, Type: ebrains.kgcore.JSONMapperMap
            %       Required properties in the model for this call:
            %       Optional properties in the model for this call:
            %           id
            %           empty
            %
            % Optional name-value parameters:
            %   xglobal - By default, the specification is only valid for the current client. If this flag is set to true (and the client/user combination has the permission), the specification is applied for all clients (unless they have defined something by themselves), Type: logical
            %
            % Responses:
            %   200: OK
            %
            % Returns: 
            %
            % See Also: ebrains.kgcore.models.

            arguments
              obj ebrains.kgcore.api.Admin
              type string
              request_body ebrains.kgcore.JSONMapperMap
              optionals.xglobal logical
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % No return content type specified, defaulting to JSON
            request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            
            % Verify that operation supports JSON or FORM as input
            specContentTypeHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/json');
            elseif ismember("application/x-www-form-urlencoded",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/x-www-form-urlencoded');
            else
                error("ebrains:kgcore:api:createTypeDefinition:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' and 'application/x-www-form-urlencoded' MediaTypes.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","createTypeDefinition")
            end
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('PUT');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://core.kg.ebrains.eu");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v3/types/specification";

            % No path parameters

            % Set query parameters
            if isfield(optionals, "xglobal"), uri.Query(end+1) = matlab.net.QueryParameter("global", optionals.xglobal); end
            uri.Query(end+1) = matlab.net.QueryParameter("type", type);
            
            % Set JSON Body
            requiredProperties = [...
            ];
            optionalProperties = [...
                "id",...
                "empty",...
            ];
            request.Body(1).Payload = request_body.getPayload(requiredProperties,optionalProperties);

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "Authorization", ...
                "Client-Authorization", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("createTypeDefinition", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("createTypeDefinition", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:kgcore:api:createTypeDefinition:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","createTypeDefinition",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % createTypeDefinition method

        function [code, result, response] = defineProperty(obj, property, request_body, optionals)
            % defineProperty Upload a property specification either globally or for the requesting client
            % No description provided
            %
            % Required parameters:
            %   property - No description provided, Type: string
            %   request_body - No description provided, Type: ebrains.kgcore.JSONMapperMap
            %       Required properties in the model for this call:
            %       Optional properties in the model for this call:
            %           id
            %           empty
            %
            % Optional name-value parameters:
            %   xglobal - By default, the specification is only valid for the current client. If this flag is set to true (and the client/user combination has the permission), the specification is applied for all clients (unless they have defined something by themselves), Type: logical
            %
            % Responses:
            %   200: OK
            %
            % Returns: 
            %
            % See Also: ebrains.kgcore.models.

            arguments
              obj ebrains.kgcore.api.Admin
              property string
              request_body ebrains.kgcore.JSONMapperMap
              optionals.xglobal logical
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % No return content type specified, defaulting to JSON
            request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            
            % Verify that operation supports JSON or FORM as input
            specContentTypeHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/json');
            elseif ismember("application/x-www-form-urlencoded",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/x-www-form-urlencoded');
            else
                error("ebrains:kgcore:api:defineProperty:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' and 'application/x-www-form-urlencoded' MediaTypes.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","defineProperty")
            end
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('PUT');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://core.kg.ebrains.eu");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v3/properties";

            % No path parameters

            % Set query parameters
            if isfield(optionals, "xglobal"), uri.Query(end+1) = matlab.net.QueryParameter("global", optionals.xglobal); end
            uri.Query(end+1) = matlab.net.QueryParameter("property", property);
            
            % Set JSON Body
            requiredProperties = [...
            ];
            optionalProperties = [...
                "id",...
                "empty",...
            ];
            request.Body(1).Payload = request_body.getPayload(requiredProperties,optionalProperties);

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "Authorization", ...
                "Client-Authorization", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("defineProperty", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("defineProperty", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:kgcore:api:defineProperty:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","defineProperty",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % defineProperty method

        function [code, result, response] = definePropertyForType(obj, property, type, request_body, optionals)
            % definePropertyForType Define a property specification either globally for the requesting client
            % No description provided
            %
            % Required parameters:
            %   property - No description provided, Type: string
            %   type - No description provided, Type: string
            %   request_body - No description provided, Type: ebrains.kgcore.JSONMapperMap
            %       Required properties in the model for this call:
            %       Optional properties in the model for this call:
            %           id
            %           empty
            %
            % Optional name-value parameters:
            %   xglobal - By default, the specification is only valid for the current client. If this flag is set to true (and the client/user combination has the permission), the specification is applied for all clients (unless they have defined something by themselves), Type: logical
            %
            % Responses:
            %   200: OK
            %
            % Returns: 
            %
            % See Also: ebrains.kgcore.models.

            arguments
              obj ebrains.kgcore.api.Admin
              property string
              type string
              request_body ebrains.kgcore.JSONMapperMap
              optionals.xglobal logical
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % No return content type specified, defaulting to JSON
            request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            
            % Verify that operation supports JSON or FORM as input
            specContentTypeHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/json');
            elseif ismember("application/x-www-form-urlencoded",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/x-www-form-urlencoded');
            else
                error("ebrains:kgcore:api:definePropertyForType:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' and 'application/x-www-form-urlencoded' MediaTypes.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","definePropertyForType")
            end
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('PUT');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://core.kg.ebrains.eu");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v3/propertiesForType";

            % No path parameters

            % Set query parameters
            if isfield(optionals, "xglobal"), uri.Query(end+1) = matlab.net.QueryParameter("global", optionals.xglobal); end
            uri.Query(end+1) = matlab.net.QueryParameter("property", property);
            uri.Query(end+1) = matlab.net.QueryParameter("type", type);
            
            % Set JSON Body
            requiredProperties = [...
            ];
            optionalProperties = [...
                "id",...
                "empty",...
            ];
            request.Body(1).Payload = request_body.getPayload(requiredProperties,optionalProperties);

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "Authorization", ...
                "Client-Authorization", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("definePropertyForType", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("definePropertyForType", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:kgcore:api:definePropertyForType:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","definePropertyForType",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % definePropertyForType method

        function [code, result, response] = deprecateProperty(obj, property, optionals)
            % deprecateProperty Upload a property specification either globally or for the requesting client
            % No description provided
            %
            % Required parameters:
            %   property - No description provided, Type: string
            %
            % Optional name-value parameters:
            %   xglobal - By default, the specification is only valid for the current client. If this flag is set to true (and the client/user combination has the permission), the specification is applied for all clients (unless they have defined something by themselves), Type: logical
            %
            % Responses:
            %   200: OK
            %
            % Returns: 
            %
            % See Also: ebrains.kgcore.models.

            arguments
              obj ebrains.kgcore.api.Admin
              property string
              optionals.xglobal logical
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % No return content type specified, defaulting to JSON
            request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('DELETE');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://core.kg.ebrains.eu");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v3/properties";

            % No path parameters

            % Set query parameters
            if isfield(optionals, "xglobal"), uri.Query(end+1) = matlab.net.QueryParameter("global", optionals.xglobal); end
            uri.Query(end+1) = matlab.net.QueryParameter("property", property);
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "Authorization", ...
                "Client-Authorization", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("deprecateProperty", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("deprecateProperty", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:kgcore:api:deprecateProperty:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","deprecateProperty",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % deprecateProperty method

        function [code, result, response] = deprecatePropertyForType(obj, property, type, optionals)
            % deprecatePropertyForType Deprecate a property specification for a specific type either globally or for the requesting client
            % No description provided
            %
            % Required parameters:
            %   property - No description provided, Type: string
            %   type - No description provided, Type: string
            %
            % Optional name-value parameters:
            %   xglobal - By default, the specification is only valid for the current client. If this flag is set to true (and the client/user combination has the permission), the specification is applied for all clients (unless they have defined something by themselves), Type: logical
            %
            % Responses:
            %   200: OK
            %
            % Returns: 
            %
            % See Also: ebrains.kgcore.models.

            arguments
              obj ebrains.kgcore.api.Admin
              property string
              type string
              optionals.xglobal logical
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % No return content type specified, defaulting to JSON
            request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('DELETE');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://core.kg.ebrains.eu");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v3/propertiesForType";

            % No path parameters

            % Set query parameters
            if isfield(optionals, "xglobal"), uri.Query(end+1) = matlab.net.QueryParameter("global", optionals.xglobal); end
            uri.Query(end+1) = matlab.net.QueryParameter("property", property);
            uri.Query(end+1) = matlab.net.QueryParameter("type", type);
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "Authorization", ...
                "Client-Authorization", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("deprecatePropertyForType", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("deprecatePropertyForType", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:kgcore:api:deprecatePropertyForType:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","deprecatePropertyForType",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % deprecatePropertyForType method

        function [code, result, response] = getAllRoleDefinitions(obj)
            % getAllRoleDefinitions No summary provided
            % No description provided
            %
            % No required parameters
            %
            % No optional parameters
            %
            % Responses:
            %   200: OK
            %
            % Returns: Array of JsonLdDoc
            %
            % See Also: ebrains.kgcore.models.JsonLdDoc

            arguments
              obj ebrains.kgcore.api.Admin
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:kgcore:api:getAllRoleDefinitions:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","getAllRoleDefinitions")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('GET');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://core.kg.ebrains.eu");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v3/setup/permissions";

            % No path parameters

            % No query parameters
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "Authorization", ...
                "Client-Authorization", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("getAllRoleDefinitions", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("getAllRoleDefinitions", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = ebrains.kgcore.models.JsonLdDoc(response.Body.Data);
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:kgcore:api:getAllRoleDefinitions:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","getAllRoleDefinitions",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % getAllRoleDefinitions method

        function [code, result, response] = getAvailableChecks(obj)
            % getAvailableChecks No summary provided
            % No description provided
            %
            % No required parameters
            %
            % No optional parameters
            %
            % Responses:
            %   200: OK
            %
            % Returns: Array of string
            %
            % See Also: ebrains.kgcore.models.string

            arguments
              obj ebrains.kgcore.api.Admin
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:kgcore:api:getAvailableChecks:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","getAvailableChecks")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('GET');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://core.kg.ebrains.eu");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v3/health";

            % No path parameters

            % No query parameters
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "Authorization", ...
                "Client-Authorization", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("getAvailableChecks", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("getAvailableChecks", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:kgcore:api:getAvailableChecks:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","getAvailableChecks",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % getAvailableChecks method

        function [code, result, response] = getClaimForRole(obj, role, optionals)
            % getClaimForRole No summary provided
            % No description provided
            %
            % Required parameters:
            %   role - No description provided, Type: string
            %
            % Optional name-value parameters:
            %   space - No description provided, Type: string
            %
            % Responses:
            %   200: OK
            %
            % Returns: JsonLdDoc
            %
            % See Also: ebrains.kgcore.models.JsonLdDoc

            arguments
              obj ebrains.kgcore.api.Admin
              role string { mustBeMember(role,["CONSUMER","REVIEWER","EDITOR","OWNER","ADMIN"]) }
              optionals.space string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:kgcore:api:getClaimForRole:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","getClaimForRole")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('GET');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://core.kg.ebrains.eu");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v3/setup/permissions/{role}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "role" +"}") = role;

            % Set query parameters
            if isfield(optionals, "space"), uri.Query(end+1) = matlab.net.QueryParameter("space", optionals.space); end
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "Authorization", ...
                "Client-Authorization", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("getClaimForRole", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("getClaimForRole", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = ebrains.kgcore.models.JsonLdDoc(response.Body.Data);
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:kgcore:api:getClaimForRole:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","getClaimForRole",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % getClaimForRole method

        function [code, result, response] = getReport(obj, stage, name)
            % getReport No summary provided
            % No description provided
            %
            % Required parameters:
            %   stage - No description provided, Type: string
            %   name - No description provided, Type: string
            %
            % No optional parameters
            %
            % Responses:
            %   200: OK
            %
            % Returns: Array of DynamicJson
            %
            % See Also: ebrains.kgcore.models.DynamicJson

            arguments
              obj ebrains.kgcore.api.Admin
              stage string { mustBeMember(stage,["IN_PROGRESS","RELEASED"]) }
              name string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:kgcore:api:getReport:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","getReport")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('GET');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://core.kg.ebrains.eu");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v3/health/{name}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "name" +"}") = name;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("stage", stage);
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "Authorization", ...
                "Client-Authorization", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("getReport", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("getReport", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = ebrains.kgcore.models.DynamicJson(response.Body.Data);
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:kgcore:api:getReport:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","getReport",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % getReport method

        function [code, result, response] = healthStatus(obj)
            % healthStatus No summary provided
            % No description provided
            %
            % No required parameters
            %
            % No optional parameters
            %
            % Responses:
            %   201: Created
            %
            % Returns: 
            %
            % See Also: ebrains.kgcore.models.

            arguments
              obj ebrains.kgcore.api.Admin
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % No return content type specified, defaulting to JSON
            request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('PUT');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://core.kg.ebrains.eu");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v3/health";

            % No path parameters

            % No query parameters
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "Authorization", ...
                "Client-Authorization", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("healthStatus", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("healthStatus", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 201
                    result = response.Body.Data;
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:kgcore:api:healthStatus:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","healthStatus",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % healthStatus method

        function [code, result, response] = removeSpaceDefinition(obj, space)
            % removeSpaceDefinition Remove a space definition
            % No description provided
            %
            % Required parameters:
            %   space - The space the definition should be removed for. Please note that you can''t do so for your private space (\"myspace\"), Type: string
            %
            % No optional parameters
            %
            % Responses:
            %   200: OK
            %
            % Returns: 
            %
            % See Also: ebrains.kgcore.models.

            arguments
              obj ebrains.kgcore.api.Admin
              space string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % No return content type specified, defaulting to JSON
            request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('DELETE');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://core.kg.ebrains.eu");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v3/spaces/{space}/specification";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "space" +"}") = space;

            % No query parameters
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "Authorization", ...
                "Client-Authorization", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("removeSpaceDefinition", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("removeSpaceDefinition", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:kgcore:api:removeSpaceDefinition:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","removeSpaceDefinition",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % removeSpaceDefinition method

        function [code, result, response] = removeTypeDefinition(obj, optionals)
            % removeTypeDefinition Remove a type definition
            % Allows to deprecate a type specification
            %
            % No required parameters
            %
            % Optional name-value parameters:
            %   type - No description provided, Type: string
            %   xglobal - No description provided, Type: logical
            %
            % Responses:
            %   200: OK
            %
            % Returns: 
            %
            % See Also: ebrains.kgcore.models.

            arguments
              obj ebrains.kgcore.api.Admin
              optionals.type string
              optionals.xglobal logical
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % No return content type specified, defaulting to JSON
            request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('DELETE');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://core.kg.ebrains.eu");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v3/types/specification";

            % No path parameters

            % Set query parameters
            if isfield(optionals, "type"), uri.Query(end+1) = matlab.net.QueryParameter("type", optionals.type); end
            if isfield(optionals, "xglobal"), uri.Query(end+1) = matlab.net.QueryParameter("global", optionals.xglobal); end
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "Authorization", ...
                "Client-Authorization", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("removeTypeDefinition", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("removeTypeDefinition", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:kgcore:api:removeTypeDefinition:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","removeTypeDefinition",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % removeTypeDefinition method

        function [code, result, response] = removeTypeFromSpace(obj, space, type)
            % removeTypeFromSpace Remove a type in space definition
            % No description provided
            %
            % Required parameters:
            %   space - The space the type shall be removed from or \"myspace\" for your private space, Type: string
            %   type - No description provided, Type: string
            %
            % No optional parameters
            %
            % Responses:
            %   200: OK
            %
            % Returns: 
            %
            % See Also: ebrains.kgcore.models.

            arguments
              obj ebrains.kgcore.api.Admin
              space string
              type string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % No return content type specified, defaulting to JSON
            request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('DELETE');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://core.kg.ebrains.eu");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v3/spaces/{space}/types";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "space" +"}") = space;

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("type", type);
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "Authorization", ...
                "Client-Authorization", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("removeTypeFromSpace", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("removeTypeFromSpace", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:kgcore:api:removeTypeFromSpace:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","removeTypeFromSpace",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % removeTypeFromSpace method

        function [code, result, response] = rerunEvents(obj, space)
            % rerunEvents Trigger a rerun of the events of this space
            % No description provided
            %
            % Required parameters:
            %   space - The space the event rerun shall be executed for., Type: string
            %
            % No optional parameters
            %
            % Responses:
            %   200: OK
            %
            % Returns: 
            %
            % See Also: ebrains.kgcore.models.

            arguments
              obj ebrains.kgcore.api.Admin
              space string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % No return content type specified, defaulting to JSON
            request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('PUT');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://core.kg.ebrains.eu");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v3/spaces/{space}/eventHistory";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "space" +"}") = space;

            % No query parameters
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "Authorization", ...
                "Client-Authorization", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("rerunEvents", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("rerunEvents", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:kgcore:api:rerunEvents:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","rerunEvents",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % rerunEvents method

        function [code, result, response] = triggerInference(obj, space, optionals)
            % triggerInference Triggers the inference of all documents of the given space
            % No description provided
            %
            % Required parameters:
            %   space - No description provided, Type: string
            %
            % Optional name-value parameters:
            %   identifier - No description provided, Type: string
            %   async - No description provided, Type: logical
            %
            % Responses:
            %   200: OK
            %
            % Returns: 
            %
            % See Also: ebrains.kgcore.models.

            arguments
              obj ebrains.kgcore.api.Admin
              space string
              optionals.identifier string
              optionals.async logical
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % No return content type specified, defaulting to JSON
            request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('POST');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://core.kg.ebrains.eu");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v3/spaces/{space}/inference";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "space" +"}") = space;

            % Set query parameters
            if isfield(optionals, "identifier"), uri.Query(end+1) = matlab.net.QueryParameter("identifier", optionals.identifier); end
            if isfield(optionals, "async"), uri.Query(end+1) = matlab.net.QueryParameter("async", optionals.async); end
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "Authorization", ...
                "Client-Authorization", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("triggerInference", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("triggerInference", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:kgcore:api:triggerInference:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","triggerInference",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % triggerInference method

        function [code, result, response] = updateClaimForRole(obj, role, remove, request_body, optionals)
            % updateClaimForRole No summary provided
            % No description provided
            %
            % Required parameters:
            %   role - No description provided, Type: string
            %   remove - No description provided, Type: logical
            %   request_body - No description provided, Type: ebrains.kgcore.JSONMapperMap
            %       Required properties in the model for this call:
            %       Optional properties in the model for this call:
            %
            % Optional name-value parameters:
            %   space - No description provided, Type: string
            %
            % Responses:
            %   200: OK
            %
            % Returns: JsonLdDoc
            %
            % See Also: ebrains.kgcore.models.JsonLdDoc

            arguments
              obj ebrains.kgcore.api.Admin
              role string { mustBeMember(role,["CONSUMER","REVIEWER","EDITOR","OWNER","ADMIN"]) }
              remove logical
              request_body ebrains.kgcore.JSONMapperMap
              optionals.space string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:kgcore:api:updateClaimForRole:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","updateClaimForRole")
            end
            
            % Verify that operation supports JSON or FORM as input
            specContentTypeHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/json');
            elseif ismember("application/x-www-form-urlencoded",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/x-www-form-urlencoded');
            else
                error("ebrains:kgcore:api:updateClaimForRole:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' and 'application/x-www-form-urlencoded' MediaTypes.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","updateClaimForRole")
            end
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('PATCH');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://core.kg.ebrains.eu");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v3/setup/permissions/{role}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "role" +"}") = role;

            % Set query parameters
            if isfield(optionals, "space"), uri.Query(end+1) = matlab.net.QueryParameter("space", optionals.space); end
            uri.Query(end+1) = matlab.net.QueryParameter("remove", remove);
            
            % Set JSON Body
            requiredProperties = [...
            ];
            optionalProperties = [...
            ];
            request.Body(1).Payload = request_body.getPayload(requiredProperties,optionalProperties);

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "Authorization", ...
                "Client-Authorization", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("updateClaimForRole", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("updateClaimForRole", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = ebrains.kgcore.models.JsonLdDoc(response.Body.Data);
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:kgcore:api:updateClaimForRole:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","updateClaimForRole",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % updateClaimForRole method

    end %methods
end %class


