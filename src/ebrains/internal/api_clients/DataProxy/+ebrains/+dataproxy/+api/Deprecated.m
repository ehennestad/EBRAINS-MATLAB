classdef Deprecated < ebrains.dataproxy.BaseClient
    % Deprecated No description provided
    %
    % Deprecated Properties:
    %
    %   serverUri           - Base URI to use when calling the API. Allows using a different server
    %                         than specified in the original API spec.
    %   httpOptions         - HTTPOptions used by all requests.
    %   preferredAuthMethod - If operation supports multiple authentication methods, specified which
    %                         method to prefer.
    %   bearerToken         - If Bearer token authentication is used, the token can be supplied 
    %                         here. Note the token is only used if operations are called for which
    %                         the API explicitly specified that Bearer authentication is supported.
    %                         If this has not been specified in the spec but most operations do 
    %                         require Bearer authentication, consider adding the relevant header to
    %                         all requests in the preSend method.
    %   apiKey              - If API key authentication is used, the key can be supplied here. 
    %                         Note the key is only used if operations are called for which
    %                         the API explicitly specified that API key authentication is supported.
    %                         If this has not been specified in the spec but most operations do 
    %                         require API key authentication, consider adding the API key to all
    %                         requests in the preSend method.
    %   httpCredentials     - If Basic or Digest authentication is supported username/password
    %                         credentials can be supplied here as matlab.net.http.Credentials. Note 
    %                         these are only actively used if operations are called for which the 
    %                         API spec has specified they require Basic authentication. If this has
    %                         not been specified in the spec but most operations do require
    %                         Basic authentication, consider setting the Credentials property in the
    %                         httpOptions rather than through httpCredentials.
    %   cookies             - Cookie jar. The cookie jar is shared across all Api classes in the 
    %                         same package. All responses are automatically parsed for Set-Cookie
    %                         headers and cookies are automatically added to the jar. Similarly
    %                         cookies are added to outgoing requests if there are matching cookies 
    %                         in the jar for the given request. Cookies can also be added manually
    %                         by calling the setCookies method on the cookies property. The cookie
    %                         jar is also saved to disk (cookies.mat in the same directory as 
    %                         BaseClient) and reloaded in new MATLAB sessions.
    %
    % Deprecated Methods:
    %
    %   Deprecated - Constructor
    %   accessPermalinkRessourceV1PermalinksPermalinkIdGet - Access a permalink resource. The user is redirected to the object download link.
    %   bucketInitV1BucketsBucketNameInitPost - Deprecated. Please use the /buckets endpoint. Create the bucket. By default, the collab bucket is not created.
    %   bucketStatV1PublicBucketsBucketNameStatGet - Get bucket stats
    %   createPermalinkV1PermalinksPost - Creates a shareable permanent link to a bucket object
    %   datasetStatV1PublicDatasetsDatasetIdStatGet - Get dataset stats
    %   deletePermalinkRessourceV1PermalinksPermalinkIdDelete - Delete a permalink.
    %   downloadBucketV1PublicBucketsBucketNameObjectNameGet - Get a download url for an object in the bucket.
    %   downloadDatasetObjectV1PublicDatasetsDatasetIdObjectNameGet - Get a download url for an object in the dataset.
    %   getDatasetV1PublicDatasetsDatasetIdGet - List objects in the dataset
    %   getPermalinksV1PermalinksGet - List permalinks
    %   listBucketObjectsV1PublicBucketsBucketNameGet - List objects in the bucket
    %   updatePermalinkV1PermalinksPermalinkIdPut - Updates a shareable permanent link to a bucket object
    %
    % See Also: matlab.net.http.HTTPOptions, matlab.net.http.Credentials, 
    %   CookieJar.setCookies, ebrains.dataproxy.BaseClient

    % This file is automatically generated using OpenAPI
    % Specification version: 1.0.0
    % MATLAB Generator for OpenAPI version: 1.0.9
    

    % Instruct MATLAB Code Analyzer to ignore unnecessary brackets
    %#ok<*NBRAK2> 

    % Class properties
    properties
    end

    % Class methods
    methods
        function obj = Deprecated(options)
            % Deprecated Constructor, creates a Deprecated instance.
            % When called without inputs, tries to load configuration
            % options from JSON file 'ebrains.dataproxy.Client.Settings.json'.
            % If this file is not present, the instance is initialized with 
            % default configuration option. An alternative configuration 
            % file can be provided through the "configFile" Name-Value pair.
            % All other properties of the instance can also be overridden 
            % using Name-Value pairs where Name equals the property name.
            % 
            % Examples:
            %
            %   % Create a client with default options and serverUri
            %   % as parsed from OpenAPI spec (if available)
            %   client = ebrains.dataproxy.api.Deprecated();
            %
            %   % Create a client for alternative server/base URI
            %   client = ebrains.dataproxy.api.Deprecated("serverUri","https://example.com:1234/api/");
            %
            %   % Create a client loading configuration options from 
            %   % JSON configuration file
            %   client = ebrains.dataproxy.api.Deprecated("configFile","myconfig.json");
            %
            %   % Create a client with alternative HTTPOptions and an API key
            %   client = ebrains.dataproxy.api.Deprecated("httpOptions",...
            %       matlab.net.http.HTTPOptions("ConnectTimeout",42),...
            %       "apiKey", "ABC123");

            arguments
                options.configFile string
                options.?ebrains.dataproxy.BaseClient
            end
            % Call base constructor to override any configured settings
            args = namedargs2cell(options);
            obj@ebrains.dataproxy.BaseClient(args{:})
        end

        function [code, result, response] = accessPermalinkRessourceV1PermalinksPermalinkIdGet(obj, permalink_id, optionals)
            % accessPermalinkRessourceV1PermalinksPermalinkIdGet Access a permalink resource. The user is redirected to the object download link.
            % DEPRECATED, please use the same method, but without the version prefix, \"/v1\", in the path.
            %
            % Required parameters:
            %   permalink_id - No description provided, Type: string, Format: uuid
            %
            % Optional name-value parameters:
            %   inline - No description provided, Type: logical
            %
            % Responses:
            %   307: Successful Response
            %   422: Validation Error
            %
            % Returns: 
            %
            % See Also: ebrains.dataproxy.models.

            arguments
              obj ebrains.dataproxy.api.Deprecated
              permalink_id string
              optionals.inline logical
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:dataproxy:api:accessPermalinkRessourceV1PermalinksPermalinkIdGet:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","accessPermalinkRessourceV1PermalinksPermalinkIdGet")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('GET');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://data-proxy.ebrains.eu//api");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v1/permalinks/{permalink_id}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "permalink_id" +"}") = permalink_id;

            % Set query parameters
            if isfield(optionals, "inline"), uri.Query(end+1) = matlab.net.QueryParameter("inline", optionals.inline); end
            
            % No JSON body parameters

            % No form body parameters

            % Operation does not require authorization

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("accessPermalinkRessourceV1PermalinksPermalinkIdGet", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("accessPermalinkRessourceV1PermalinksPermalinkIdGet", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 307
                    result = response.Body.Data;
                case 422
                    result = ebrains.dataproxy.models.HTTPValidationError(response.Body.Data);
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:dataproxy:api:accessPermalinkRessourceV1PermalinksPermalinkIdGet:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","accessPermalinkRessourceV1PermalinksPermalinkIdGet",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % accessPermalinkRessourceV1PermalinksPermalinkIdGet method

        function [code, result, response] = bucketInitV1BucketsBucketNameInitPost(obj, bucket_name)
            % bucketInitV1BucketsBucketNameInitPost Deprecated. Please use the /buckets endpoint. Create the bucket. By default, the collab bucket is not created.
            % No description provided
            %
            % Required parameters:
            %   bucket_name - No description provided, Type: string
            %
            % No optional parameters
            %
            % Responses:
            %   200: Successful Response
            %   422: Validation Error
            %
            % Returns: 
            %
            % See Also: ebrains.dataproxy.models.

            arguments
              obj ebrains.dataproxy.api.Deprecated
              bucket_name string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:dataproxy:api:bucketInitV1BucketsBucketNameInitPost:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","bucketInitV1BucketsBucketNameInitPost")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('POST');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://data-proxy.ebrains.eu//api");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v1/buckets/{bucket_name}/init";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "bucket_name" +"}") = bucket_name;

            % No query parameters
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "HTTPBearer", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("bucketInitV1BucketsBucketNameInitPost", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("bucketInitV1BucketsBucketNameInitPost", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                case 422
                    result = ebrains.dataproxy.models.HTTPValidationError(response.Body.Data);
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:dataproxy:api:bucketInitV1BucketsBucketNameInitPost:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","bucketInitV1BucketsBucketNameInitPost",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % bucketInitV1BucketsBucketNameInitPost method

        function [code, result, response] = bucketStatV1PublicBucketsBucketNameStatGet(obj, bucket_name)
            % bucketStatV1PublicBucketsBucketNameStatGet Get bucket stats
            % DEPRECATED, please use the corresponding method without \"public\" with optional authentication
            %
            % Required parameters:
            %   bucket_name - No description provided, Type: string
            %
            % No optional parameters
            %
            % Responses:
            %   200: Successful Response
            %   422: Validation Error
            %
            % Returns: ContainerStatResponse
            %
            % See Also: ebrains.dataproxy.models.ContainerStatResponse

            arguments
              obj ebrains.dataproxy.api.Deprecated
              bucket_name string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:dataproxy:api:bucketStatV1PublicBucketsBucketNameStatGet:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","bucketStatV1PublicBucketsBucketNameStatGet")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('GET');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://data-proxy.ebrains.eu//api");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v1/public/buckets/{bucket_name}/stat";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "bucket_name" +"}") = bucket_name;

            % No query parameters
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "HTTPBearer", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("bucketStatV1PublicBucketsBucketNameStatGet", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("bucketStatV1PublicBucketsBucketNameStatGet", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = ebrains.dataproxy.models.ContainerStatResponse(response.Body.Data);
                case 422
                    result = ebrains.dataproxy.models.HTTPValidationError(response.Body.Data);
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:dataproxy:api:bucketStatV1PublicBucketsBucketNameStatGet:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","bucketStatV1PublicBucketsBucketNameStatGet",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % bucketStatV1PublicBucketsBucketNameStatGet method

        function [code, result, response] = createPermalinkV1PermalinksPost(obj, PermalinkCreate)
            % createPermalinkV1PermalinksPost Creates a shareable permanent link to a bucket object
            % DEPRECATED, please use the same method, but without the version prefix, \"/v1\", in the path.
            %
            % Required parameters:
            %   PermalinkCreate - No description provided, Type: PermalinkCreate
            %       Required properties in the model for this call:
            %           object_name
            %           bucket_name
            %       Optional properties in the model for this call:
            %           description
            %
            % No optional parameters
            %
            % Responses:
            %   200: Successful Response
            %   422: Validation Error
            %
            % Returns: PermalinkModel
            %
            % See Also: ebrains.dataproxy.models.PermalinkModel

            arguments
              obj ebrains.dataproxy.api.Deprecated
              PermalinkCreate ebrains.dataproxy.models.PermalinkCreate
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:dataproxy:api:createPermalinkV1PermalinksPost:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","createPermalinkV1PermalinksPost")
            end
            
            % Verify that operation supports JSON or FORM as input
            specContentTypeHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/json');
            elseif ismember("application/x-www-form-urlencoded",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/x-www-form-urlencoded');
            else
                error("ebrains:dataproxy:api:createPermalinkV1PermalinksPost:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' and 'application/x-www-form-urlencoded' MediaTypes.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","createPermalinkV1PermalinksPost")
            end
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('POST');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://data-proxy.ebrains.eu//api");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v1/permalinks";

            % No path parameters

            % No query parameters
            
            % Set JSON Body
            requiredProperties = [...
                "object_name",...
                "bucket_name",...
            ];
            optionalProperties = [...
                "description",...
            ];
            request.Body(1).Payload = PermalinkCreate.getPayload(requiredProperties,optionalProperties);

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "HTTPBearer", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("createPermalinkV1PermalinksPost", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("createPermalinkV1PermalinksPost", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = ebrains.dataproxy.models.PermalinkModel(response.Body.Data);
                case 422
                    result = ebrains.dataproxy.models.HTTPValidationError(response.Body.Data);
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:dataproxy:api:createPermalinkV1PermalinksPost:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","createPermalinkV1PermalinksPost",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % createPermalinkV1PermalinksPost method

        function [code, result, response] = datasetStatV1PublicDatasetsDatasetIdStatGet(obj, dataset_id)
            % datasetStatV1PublicDatasetsDatasetIdStatGet Get dataset stats
            % DEPRECATED, please use the corresponding method without \"public\" with optional authentication
            %
            % Required parameters:
            %   dataset_id - No description provided, Type: string, Format: uuid
            %
            % No optional parameters
            %
            % Responses:
            %   200: Successful Response
            %   422: Validation Error
            %
            % Returns: ContainerStat
            %
            % See Also: ebrains.dataproxy.models.ContainerStat

            arguments
              obj ebrains.dataproxy.api.Deprecated
              dataset_id string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:dataproxy:api:datasetStatV1PublicDatasetsDatasetIdStatGet:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","datasetStatV1PublicDatasetsDatasetIdStatGet")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('GET');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://data-proxy.ebrains.eu//api");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v1/public/datasets/{dataset_id}/stat";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "dataset_id" +"}") = dataset_id;

            % No query parameters
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "HTTPBearer", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("datasetStatV1PublicDatasetsDatasetIdStatGet", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("datasetStatV1PublicDatasetsDatasetIdStatGet", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = ebrains.dataproxy.models.ContainerStat(response.Body.Data);
                case 422
                    result = ebrains.dataproxy.models.HTTPValidationError(response.Body.Data);
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:dataproxy:api:datasetStatV1PublicDatasetsDatasetIdStatGet:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","datasetStatV1PublicDatasetsDatasetIdStatGet",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % datasetStatV1PublicDatasetsDatasetIdStatGet method

        function [code, result, response] = deletePermalinkRessourceV1PermalinksPermalinkIdDelete(obj, permalink_id)
            % deletePermalinkRessourceV1PermalinksPermalinkIdDelete Delete a permalink.
            % DEPRECATED, please use the same method, but without the version prefix, \"/v1\", in the path.
            %
            % Required parameters:
            %   permalink_id - No description provided, Type: string, Format: uuid
            %
            % No optional parameters
            %
            % Responses:
            %   200: Successful Response
            %   422: Validation Error
            %
            % Returns: 
            %
            % See Also: ebrains.dataproxy.models.

            arguments
              obj ebrains.dataproxy.api.Deprecated
              permalink_id string
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:dataproxy:api:deletePermalinkRessourceV1PermalinksPermalinkIdDelete:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","deletePermalinkRessourceV1PermalinksPermalinkIdDelete")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('DELETE');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://data-proxy.ebrains.eu//api");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v1/permalinks/{permalink_id}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "permalink_id" +"}") = permalink_id;

            % No query parameters
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "HTTPBearer", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("deletePermalinkRessourceV1PermalinksPermalinkIdDelete", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("deletePermalinkRessourceV1PermalinksPermalinkIdDelete", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = response.Body.Data;
                case 422
                    result = ebrains.dataproxy.models.HTTPValidationError(response.Body.Data);
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:dataproxy:api:deletePermalinkRessourceV1PermalinksPermalinkIdDelete:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","deletePermalinkRessourceV1PermalinksPermalinkIdDelete",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % deletePermalinkRessourceV1PermalinksPermalinkIdDelete method

        function [code, result, response] = downloadBucketV1PublicBucketsBucketNameObjectNameGet(obj, bucket_name, object_name, optionals)
            % downloadBucketV1PublicBucketsBucketNameObjectNameGet Get a download url for an object in the bucket.
            % DEPRECATED, please use the corresponding method without \"public\" with optional authentication
            %
            % Required parameters:
            %   bucket_name - No description provided, Type: string
            %   object_name - No description provided, Type: string
            %
            % Optional name-value parameters:
            %   inline - No description provided, Type: logical
            %   ttl - The time to live in seconds of the returned temporary URL. Please note that this parameter can only be set by administrators of the bucket. For everyone else, the system will chose a predefined duration., Type: int32
            %   redirect - DEPRECATED: It is planned to remove this functionality in the next version of the API. To be compatible already, please set \"redirect\" to false. In the current implementation, this parameter is only allowed for non-authenticated calls. If a call is made with an authentication header with redirect=true, a 400 (Bad request) is thrown, Type: logical
            %
            % Responses:
            %   200: Successful Response
            %   422: Validation Error
            %
            % Returns: TempUrlResponse
            %
            % See Also: ebrains.dataproxy.models.TempUrlResponse

            arguments
              obj ebrains.dataproxy.api.Deprecated
              bucket_name string
              object_name string
              optionals.inline logical
              optionals.ttl int32
              optionals.redirect logical
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:dataproxy:api:downloadBucketV1PublicBucketsBucketNameObjectNameGet:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","downloadBucketV1PublicBucketsBucketNameObjectNameGet")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('GET');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://data-proxy.ebrains.eu//api");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v1/public/buckets/{bucket_name}/{object_name}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "bucket_name" +"}") = bucket_name;
            uri.Path(uri.Path == "{" + "object_name" +"}") = object_name;

            % Set query parameters
            if isfield(optionals, "inline"), uri.Query(end+1) = matlab.net.QueryParameter("inline", optionals.inline); end
            if isfield(optionals, "ttl"), uri.Query(end+1) = matlab.net.QueryParameter("ttl", optionals.ttl); end
            if isfield(optionals, "redirect"), uri.Query(end+1) = matlab.net.QueryParameter("redirect", optionals.redirect); end
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "HTTPBearer", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("downloadBucketV1PublicBucketsBucketNameObjectNameGet", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("downloadBucketV1PublicBucketsBucketNameObjectNameGet", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = ebrains.dataproxy.models.TempUrlResponse(response.Body.Data);
                case 422
                    result = ebrains.dataproxy.models.HTTPValidationError(response.Body.Data);
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:dataproxy:api:downloadBucketV1PublicBucketsBucketNameObjectNameGet:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","downloadBucketV1PublicBucketsBucketNameObjectNameGet",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % downloadBucketV1PublicBucketsBucketNameObjectNameGet method

        function [code, result, response] = downloadDatasetObjectV1PublicDatasetsDatasetIdObjectNameGet(obj, dataset_id, object_name, optionals)
            % downloadDatasetObjectV1PublicDatasetsDatasetIdObjectNameGet Get a download url for an object in the dataset.
            % DEPRECATED, please use the corresponding method without \"public\" with optional authentication
            %
            % Required parameters:
            %   dataset_id - No description provided, Type: string, Format: uuid
            %   object_name - No description provided, Type: string
            %
            % Optional name-value parameters:
            %   inline - No description provided, Type: logical
            %   redirect - No description provided, Type: logical
            %
            % Responses:
            %   200: Successful Response
            %   422: Validation Error
            %
            % Returns: TempUrlResponse
            %
            % See Also: ebrains.dataproxy.models.TempUrlResponse

            arguments
              obj ebrains.dataproxy.api.Deprecated
              dataset_id string
              object_name string
              optionals.inline logical
              optionals.redirect logical
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:dataproxy:api:downloadDatasetObjectV1PublicDatasetsDatasetIdObjectNameGet:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","downloadDatasetObjectV1PublicDatasetsDatasetIdObjectNameGet")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('GET');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://data-proxy.ebrains.eu//api");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v1/public/datasets/{dataset_id}/{object_name}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "dataset_id" +"}") = dataset_id;
            uri.Path(uri.Path == "{" + "object_name" +"}") = object_name;

            % Set query parameters
            if isfield(optionals, "inline"), uri.Query(end+1) = matlab.net.QueryParameter("inline", optionals.inline); end
            if isfield(optionals, "redirect"), uri.Query(end+1) = matlab.net.QueryParameter("redirect", optionals.redirect); end
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "HTTPBearer", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("downloadDatasetObjectV1PublicDatasetsDatasetIdObjectNameGet", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("downloadDatasetObjectV1PublicDatasetsDatasetIdObjectNameGet", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = ebrains.dataproxy.models.TempUrlResponse(response.Body.Data);
                case 422
                    result = ebrains.dataproxy.models.HTTPValidationError(response.Body.Data);
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:dataproxy:api:downloadDatasetObjectV1PublicDatasetsDatasetIdObjectNameGet:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","downloadDatasetObjectV1PublicDatasetsDatasetIdObjectNameGet",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % downloadDatasetObjectV1PublicDatasetsDatasetIdObjectNameGet method

        function [code, result, response] = getDatasetV1PublicDatasetsDatasetIdGet(obj, dataset_id, optionals)
            % getDatasetV1PublicDatasetsDatasetIdGet List objects in the dataset
            % DEPRECATED, please use the corresponding method without \"public\" with optional authentication
            %
            % Required parameters:
            %   dataset_id - No description provided, Type: string, Format: uuid
            %
            % Optional name-value parameters:
            %   prefix - No description provided, Type: string
            %   delimiter - No description provided, Type: string
            %   marker - No description provided, Type: string
            %   limit - No description provided, Type: int32
            %
            % Responses:
            %   200: Successful Response
            %   422: Validation Error
            %
            % Returns: AnyType
            %
            % See Also: ebrains.dataproxy.models.AnyType

            arguments
              obj ebrains.dataproxy.api.Deprecated
              dataset_id string
              optionals.prefix string
              optionals.delimiter string
              optionals.marker string
              optionals.limit int32
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:dataproxy:api:getDatasetV1PublicDatasetsDatasetIdGet:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","getDatasetV1PublicDatasetsDatasetIdGet")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('GET');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://data-proxy.ebrains.eu//api");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v1/public/datasets/{dataset_id}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "dataset_id" +"}") = dataset_id;

            % Set query parameters
            if isfield(optionals, "prefix"), uri.Query(end+1) = matlab.net.QueryParameter("prefix", optionals.prefix); end
            if isfield(optionals, "delimiter"), uri.Query(end+1) = matlab.net.QueryParameter("delimiter", optionals.delimiter); end
            if isfield(optionals, "marker"), uri.Query(end+1) = matlab.net.QueryParameter("marker", optionals.marker); end
            if isfield(optionals, "limit"), uri.Query(end+1) = matlab.net.QueryParameter("limit", optionals.limit); end
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "HTTPBearer", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("getDatasetV1PublicDatasetsDatasetIdGet", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("getDatasetV1PublicDatasetsDatasetIdGet", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = ebrains.dataproxy.models.AnyType(response.Body.Data);
                case 422
                    result = ebrains.dataproxy.models.HTTPValidationError(response.Body.Data);
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:dataproxy:api:getDatasetV1PublicDatasetsDatasetIdGet:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","getDatasetV1PublicDatasetsDatasetIdGet",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % getDatasetV1PublicDatasetsDatasetIdGet method

        function [code, result, response] = getPermalinksV1PermalinksGet(obj, bucket_name, optionals)
            % getPermalinksV1PermalinksGet List permalinks
            % DEPRECATED, please use the same method, but without the version prefix, \"/v1\", in the path.
            %
            % Required parameters:
            %   bucket_name - No description provided, Type: string
            %
            % Optional name-value parameters:
            %   object_name - No description provided, Type: string
            %   offset - No description provided, Type: int32
            %   limit - No description provided, Type: int32
            %   revoked - No description provided, Type: logical
            %
            % Responses:
            %   200: Successful Response
            %   422: Validation Error
            %
            % Returns: Array of PermalinkModel
            %
            % See Also: ebrains.dataproxy.models.PermalinkModel

            arguments
              obj ebrains.dataproxy.api.Deprecated
              bucket_name string
              optionals.object_name string
              optionals.offset int32
              optionals.limit int32
              optionals.revoked logical
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:dataproxy:api:getPermalinksV1PermalinksGet:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","getPermalinksV1PermalinksGet")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('GET');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://data-proxy.ebrains.eu//api");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v1/permalinks";

            % No path parameters

            % Set query parameters
            uri.Query(end+1) = matlab.net.QueryParameter("bucket_name", bucket_name);
            if isfield(optionals, "object_name"), uri.Query(end+1) = matlab.net.QueryParameter("object_name", optionals.object_name); end
            if isfield(optionals, "offset"), uri.Query(end+1) = matlab.net.QueryParameter("offset", optionals.offset); end
            if isfield(optionals, "limit"), uri.Query(end+1) = matlab.net.QueryParameter("limit", optionals.limit); end
            if isfield(optionals, "revoked"), uri.Query(end+1) = matlab.net.QueryParameter("revoked", optionals.revoked); end
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "HTTPBearer", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("getPermalinksV1PermalinksGet", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("getPermalinksV1PermalinksGet", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = ebrains.dataproxy.models.PermalinkModel(response.Body.Data);
                case 422
                    result = ebrains.dataproxy.models.HTTPValidationError(response.Body.Data);
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:dataproxy:api:getPermalinksV1PermalinksGet:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","getPermalinksV1PermalinksGet",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % getPermalinksV1PermalinksGet method

        function [code, result, response] = listBucketObjectsV1PublicBucketsBucketNameGet(obj, bucket_name, optionals)
            % listBucketObjectsV1PublicBucketsBucketNameGet List objects in the bucket
            % DEPRECATED, please use the corresponding method without \"public\" with optional authentication
            %
            % Required parameters:
            %   bucket_name - No description provided, Type: string
            %
            % Optional name-value parameters:
            %   prefix - No description provided, Type: string
            %   delimiter - No description provided, Type: string
            %   marker - No description provided, Type: string
            %   limit - No description provided, Type: int32
            %
            % Responses:
            %   200: Successful Response
            %   422: Validation Error
            %
            % Returns: SwiftApiResponse
            %
            % See Also: ebrains.dataproxy.models.SwiftApiResponse

            arguments
              obj ebrains.dataproxy.api.Deprecated
              bucket_name string
              optionals.prefix string
              optionals.delimiter string
              optionals.marker string
              optionals.limit int32
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:dataproxy:api:listBucketObjectsV1PublicBucketsBucketNameGet:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","listBucketObjectsV1PublicBucketsBucketNameGet")
            end
            
            % No body input, so no need to check its content type
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('GET');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://data-proxy.ebrains.eu//api");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v1/public/buckets/{bucket_name}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "bucket_name" +"}") = bucket_name;

            % Set query parameters
            if isfield(optionals, "prefix"), uri.Query(end+1) = matlab.net.QueryParameter("prefix", optionals.prefix); end
            if isfield(optionals, "delimiter"), uri.Query(end+1) = matlab.net.QueryParameter("delimiter", optionals.delimiter); end
            if isfield(optionals, "marker"), uri.Query(end+1) = matlab.net.QueryParameter("marker", optionals.marker); end
            if isfield(optionals, "limit"), uri.Query(end+1) = matlab.net.QueryParameter("limit", optionals.limit); end
            
            % No JSON body parameters

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "HTTPBearer", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("listBucketObjectsV1PublicBucketsBucketNameGet", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("listBucketObjectsV1PublicBucketsBucketNameGet", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = ebrains.dataproxy.models.SwiftApiResponse(response.Body.Data);
                case 422
                    result = ebrains.dataproxy.models.HTTPValidationError(response.Body.Data);
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:dataproxy:api:listBucketObjectsV1PublicBucketsBucketNameGet:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","listBucketObjectsV1PublicBucketsBucketNameGet",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % listBucketObjectsV1PublicBucketsBucketNameGet method

        function [code, result, response] = updatePermalinkV1PermalinksPermalinkIdPut(obj, permalink_id, PermalinkUpdateForm)
            % updatePermalinkV1PermalinksPermalinkIdPut Updates a shareable permanent link to a bucket object
            % DEPRECATED, please use the same method, but without the version prefix, \"/v1\", in the path.
            %
            % Required parameters:
            %   permalink_id - No description provided, Type: string, Format: uuid
            %   PermalinkUpdateForm - No description provided, Type: PermalinkUpdateForm
            %       Required properties in the model for this call:
            %           object_name
            %       Optional properties in the model for this call:
            %
            % No optional parameters
            %
            % Responses:
            %   200: Successful Response
            %   422: Validation Error
            %
            % Returns: PermalinkModel
            %
            % See Also: ebrains.dataproxy.models.PermalinkModel

            arguments
              obj ebrains.dataproxy.api.Deprecated
              permalink_id string
              PermalinkUpdateForm ebrains.dataproxy.models.PermalinkUpdateForm
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            % Verify that operation supports returning JSON
            specAcceptHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("ebrains:dataproxy:api:updatePermalinkV1PermalinksPermalinkIdPut:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","updatePermalinkV1PermalinksPermalinkIdPut")
            end
            
            % Verify that operation supports JSON or FORM as input
            specContentTypeHeaders = [...
                "application/json", ...
            ];
            if ismember("application/json",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/json');
            elseif ismember("application/x-www-form-urlencoded",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/x-www-form-urlencoded');
            else
                error("ebrains:dataproxy:api:updatePermalinkV1PermalinksPermalinkIdPut:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' and 'application/x-www-form-urlencoded' MediaTypes.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","updatePermalinkV1PermalinksPermalinkIdPut")
            end
            
            % No header parameters

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('PUT');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("https://data-proxy.ebrains.eu//api");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "/v1/permalinks/{permalink_id}";

            % Substitute path parameters
            uri.Path(uri.Path == "{" + "permalink_id" +"}") = permalink_id;

            % No query parameters
            
            % Set JSON Body
            requiredProperties = [...
                "object_name",...
            ];
            optionalProperties = [...
            ];
            request.Body(1).Payload = PermalinkUpdateForm.getPayload(requiredProperties,optionalProperties);

            % No form body parameters

            % Configure Authentication
            authNames = [...
                "HTTPBearer", ...
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("updatePermalinkV1PermalinksPermalinkIdPut", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("updatePermalinkV1PermalinksPermalinkIdPut", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code)
                case 200
                    result = ebrains.dataproxy.models.PermalinkModel(response.Body.Data);
                case 422
                    result = ebrains.dataproxy.models.HTTPValidationError(response.Body.Data);
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("ebrains:dataproxy:api:updatePermalinkV1PermalinksPermalinkIdPut:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","updatePermalinkV1PermalinksPermalinkIdPut",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;
            end
        
        end % updatePermalinkV1PermalinksPermalinkIdPut method

    end %methods
end %class


